services:
  db:
    container_name: fractal-db
    image: postgres:15.4-alpine
    restart: always
    ports:
      - 5433:5433
    volumes:
      - db_data:/var/lib/postgresql/data
    command:
      -p 5433
    environment:
      POSTGRES_USER: fractal
      POSTGRES_PASSWORD: fractal
      POSTGRES_DB: fractal
      # required for the check below - otherwise postgresql
      # will use undefined 'root' user and raise errors
      PGUSER: fractal
    healthcheck:
      # postgresql starts up, stops, and then restarts
      # => errors if the server connects before the stop
      # this checks if the system is ready
      test: pg_isready -p 5433
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - fractal

  fractal-server:
    container_name: fractal-server
    hostname: slurm
    depends_on:
      db:
        condition: service_healthy
    image: fractal-server
    build:
      context: .
      dockerfile: server/Dockerfile
      args:
        - SLURM_CPUS=4
        - SLURM_MEMORY=16000
    ports:
      - 8000:8000
    volumes:
      - fractal_share:/home/fractal_share/
    healthcheck:
      # check if server is up from within the container (hence the localhost)
      test: curl --fail http://localhost:8000/api/alive/ || exit 1
      interval: 5s
      timeout: 2s
      retries: 5
    networks:
      - fractal



  fractal-web:
    container_name: fractal-web
    depends_on:
      fractal-server:
        condition: service_healthy
    image: fractal-web
    build:
      context: .
      dockerfile: web/Dockerfile
      args:
        - FRACTAL_SERVER_HOST=http://fractal-server:8000
    ports:
      - 5173:5173
    networks:
      - fractal

  fractal-demos-v1:
    container_name: fractal-demos-v1
    depends_on:
      fractal-server:
        condition: service_healthy
    hostname: slurm
    image: fractal-demos-v1
    build:
      context: .
      dockerfile: demos-v1/Dockerfile
    ports:
      - 6817:6818
    volumes:
      - fractal_share:/home/fractal_share/
      - ./Resources:/home/fractal_share/Resources
    command: bash -c "
      cp -r ./fractal-demos-v1 /home/fractal_share/
      && cd /home/fractal_share/fractal-demos-v1/examples
      && . ./run_demos.sh"
    networks:
      - fractal

  fractal-demos-v2:
    container_name: fractal-demos-v2
    depends_on:
      fractal-server:
        condition: service_healthy
    hostname: slurm
    image: fractal-demos-v2
    build:
      context: .
      dockerfile: demos-v2/Dockerfile
    ports:
      - 6817:6817
    volumes:
      - fractal_share:/home/fractal_share/
      - ./Resources:/home/fractal_share/Resources
    command: bash -c "
      cp -r ./fractal-demos-v2 /home/fractal_share/
      && cd /home/fractal_share/fractal-demos-v2/examples
      && . ./run_demos.sh"
    networks:
      - fractal


volumes:
  fractal_share:
    name: fractal_share
    external: false
  db_data:
    name: db_data
    external: false

networks:
  fractal:
    driver: bridge
